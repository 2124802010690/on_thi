import 'package:flutter/material.dart';
import '../services/gemini_service.dart'; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng

class ChatScreen extends StatefulWidget {
  const ChatScreen({Key? key}) : super(key: key);

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _controller = TextEditingController();
  final GeminiService _chatService = GeminiService(); 
  final ScrollController _scrollController = ScrollController(); 

  List<Map<String, String>> messages = [];
  bool _isLoading = false;
  // Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ki·ªÉm so√°t hi·ªÉn th·ªã danh s√°ch g·ª£i √Ω trong AlertDialog
  // bool _isSuggestionListVisible = false; // Kh√¥ng c·∫ßn n·ªØa v√¨ ta d√πng AlertDialog

  final List<String> _suggestions = [
    "Gi·∫£i th√≠ch v·ªÅ c√¢u ƒëi·ªÉm li·ªát l√† g√¨?",
    "C√°c bi·ªÉn b√°o c·∫•m quan tr·ªçng nh·∫•t?",
    "Quy t·∫Øc v∆∞·ª£t xe ƒë√∫ng c√°ch?",
    "N√™n h·ªçc ph·∫ßn l√Ω thuy·∫øt n√†o tr∆∞·ªõc?",
    "H·ªèi v·ªÅ xe ∆∞u ti√™n?",
    "Th·∫ø n√†o l√† v·∫°ch li·ªÅn, v·∫°ch ƒë·ª©t?",
    "T·ªëc ƒë·ªô t·ªëi ƒëa trong khu d√¢n c∆∞?",
  ];

  @override
  void initState() {
    super.initState();
    messages.add({
      "role": "assistant",
      "content": "Ch√†o b·∫°n! T√¥i l√† Chatbot √¥n thi GPLX. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ Lu·∫≠t Giao th√¥ng ƒê∆∞·ªùng b·ªô Vi·ªát Nam ƒë·ªÉ √¥n thi gi·∫•y ph√©p l√°i xe nh√©!"
    });
  }

  // C·∫≠p nh·∫≠t h√†m g·ª≠i tin nh·∫Øn
  Future<void> _sendMessage({String? suggestionText}) async {
    final text = suggestionText ?? _controller.text.trim();
    if (text.isEmpty) return;
    
    // ƒê√≥ng dialog n·∫øu tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i t·ª´ dialog
    if (suggestionText != null && Navigator.of(context).canPop()) {
      Navigator.of(context).pop(); 
    }

    // 1. C·∫≠p nh·∫≠t UI: Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng, x√≥a input, b·∫≠t loading
    setState(() {
      messages.add({"role": "user", "content": text});
      _controller.clear();
      _isLoading = true;
    });

    // 2. Cu·ªôn xu·ªëng cu·ªëi
    _scrollToBottom();
    
    // 3. G·ªçi API Gemini
    final reply = await _chatService.sendMessage(text);

    // 4. C·∫≠p nh·∫≠t UI: Th√™m tin nh·∫Øn tr·∫£ l·ªùi, t·∫Øt loading
    setState(() {
      messages.add({"role": "assistant", "content": reply});
      _isLoading = false;
    });

    // 5. Cu·ªôn xu·ªëng cu·ªëi l·∫ßn n·ªØa
    _scrollToBottom();
  }
  
  // H√†m cu·ªôn xu·ªëng cu·ªëi danh s√°ch
  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  // ‚≠ê H√ÄM M·ªöI: HI·ªÇN TH·ªä DANH S√ÅCH C√ÇU H·ªéI G·ª¢I √ù D∆Ø·ªöI D·∫†NG DIALOG ‚≠ê
  void _showSuggestionDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('üí° G·ª£i √Ω c√¢u h·ªèi', style: TextStyle(fontWeight: FontWeight.bold, color: Color(0xFF003366))),
          contentPadding: const EdgeInsets.only(top: 8, bottom: 0, left: 15, right: 15),
          content: SingleChildScrollView(
            child: ListBody(
              children: _suggestions.map((suggestion) {
                return InkWell(
                  onTap: () {
                    // G·ª≠i tin nh·∫Øn v√† ƒë√≥ng dialog
                    _sendMessage(suggestionText: suggestion);
                  },
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 8.0),
                    child: Text(
                      '‚Ä¢ $suggestion',
                      style: const TextStyle(fontSize: 15, color: Colors.black87),
                    ),
                  ),
                );
              }).toList(),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ƒê√≥ng', style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  // WIDGET M·ªöI: ITEM CHAT (Gi·ªØ nguy√™n)
  Widget _buildChatItem(Map<String, String> msg, bool isUser) {
    return Align(
      alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 6),
        padding: const EdgeInsets.all(12),
        constraints: BoxConstraints(
          maxWidth: MediaQuery.of(context).size.width * 0.75,
        ),
        decoration: BoxDecoration(
          color: isUser ? const Color(0xFF003366) : Colors.grey[200],
          borderRadius: BorderRadius.only(
            topLeft: const Radius.circular(16),
            topRight: const Radius.circular(16),
            bottomLeft: isUser ? const Radius.circular(16) : const Radius.circular(4),
            bottomRight: isUser ? const Radius.circular(4) : const Radius.circular(16),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 3,
              offset: const Offset(0, 2),
            )
          ]
        ),
        child: Text(
          msg["content"] ?? "",
          style: TextStyle(
            fontSize: 15,
            color: isUser ? Colors.white : Colors.black87,
            height: 1.4,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Ta gi·ªØ l·∫°i thanh g·ª£i √Ω d∆∞·ªõi khung chat khi m·ªõi v√†o ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t∆∞∆°ng t√°c
    final bool showInitialChips = messages.length <= 2;
    
    return Scaffold(
      backgroundColor: const Color(0xFF003366), 
      body: SafeArea(
        child: Column(
          children: [
            const SizedBox(height: 10),

            // ‚≠ê C·∫¨P NH·∫¨T HEADER: Th√™m n√∫t g·ª£i √Ω ‚≠ê
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 4.0),
              child: Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.arrow_back, color: Colors.white),
                    onPressed: () => Navigator.pop(context),
                  ),
                  // Ta cƒÉn ch·ªânh l·∫°i ƒë·ªÉ c√≥ v·ªã tr√≠ ƒë·∫πp h∆°n
                  const Icon(Icons.chat_bubble_outline, size: 24, color: Colors.white),
                  const SizedBox(width: 10),
                  const Text(
                    "Chatbot √în Thi GPLX",
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  
                  // ‚≠ê N√öT G·ª¢I √ù M·ªöI ‚≠ê
                  IconButton(
                    icon: const Icon(Icons.lightbulb_outline, color: Colors.white),
                    onPressed: () => _showSuggestionDialog(context),
                    tooltip: 'G·ª£i √Ω c√¢u h·ªèi',
                  ),
                  
                  const Spacer(),
                ],
              ),
            ),

            const SizedBox(height: 10),

            // Khung n·ªôi dung chat
            Expanded(
              child: Container(
                width: double.infinity,
                decoration: const BoxDecoration(
                  color: Colors.white,
                  borderRadius:
                      BorderRadius.vertical(top: Radius.circular(30)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Gi·ªØ l·∫°i thanh g·ª£i √Ω d∆∞·ªõi khung chat khi m·ªõi v√†o (t√πy ch·ªçn)
                    if (showInitialChips) _buildSuggestionChips(), 
                    
                    // Khu v·ª±c chat
                    Expanded(
                      child: ListView.builder(
                        controller: _scrollController,
                        padding: const EdgeInsets.only(top: 16, left: 16, right: 16, bottom: 8),
                        itemCount: messages.length,
                        itemBuilder: (context, index) {
                          final msg = messages[index];
                          final isUser = msg["role"] == "user";
                          return _buildChatItem(msg, isUser);
                        },
                      ),
                    ),

                    if (_isLoading)
                      const LinearProgressIndicator(
                        minHeight: 2,
                        backgroundColor: Colors.transparent,
                      ),

                    // √î nh·∫≠p tin nh·∫Øn
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 12, vertical: 10),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        border: Border(
                          top: BorderSide(color: Colors.grey[300]!),
                        ),
                      ),
                      child: Row(
                        children: [
                          Expanded(
                            child: TextField(
                              controller: _controller,
                              decoration: InputDecoration(
                                hintText: "Nh·∫≠p c√¢u h·ªèi...",
                                filled: true,
                                fillColor: Colors.grey[100],
                                contentPadding:
                                    const EdgeInsets.symmetric(
                                        horizontal: 14, vertical: 10),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(24),
                                  borderSide: BorderSide.none,
                                ),
                              ),
                              onSubmitted: (_) => _sendMessage(),
                            ),
                          ),
                          const SizedBox(width: 6),
                          CircleAvatar(
                            backgroundColor: const Color(0xFF003366),
                            radius: 24,
                            child: IconButton(
                              icon: const Icon(Icons.send,
                                  color: Colors.white),
                              onPressed: _sendMessage,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // WIDGET D√íNG G·ª¢I √ù D∆Ø·ªöI KHUNG CHAT (Gi·ªØ nguy√™n)
  Widget _buildSuggestionChips() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      height: 60,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _suggestions.length,
        itemBuilder: (context, index) {
          final suggestion = _suggestions[index];
          return Padding(
            padding: const EdgeInsets.only(right: 8.0),
            child: ActionChip(
              label: Text(suggestion, style: const TextStyle(fontSize: 13, color: Color(0xFF003366))),
              backgroundColor: Colors.blue.shade50,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
                side: BorderSide(color: Colors.blue.shade200),
              ),
              onPressed: () => _sendMessage(suggestionText: suggestion),
            ),
          );
        },
      ),
    );
  }
}